;1.9
;(inc (+ (dec 4) 5))
;(inc (inc (+ (dec 3) 5)))
;(inc (inc (inc (+ (dec 2) 5)))) ... Recursive
;
;(+ (dec 4) (inc 5))
;(+ (dec 3) (inc 6))
;(+ (dec 2) (inc 7))...Itterative

;-------------------------------------------------------

;1.10
(define (A x y)
    (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(display (A 1 10))
(display "\n"); 1024
(display (A 2 4))
(display "\n"); 65536
(display (A 3 3))
(display "\n") ; 65536

(define (f n) (A 0 n)); 2n
(define (g n) (A 1 n)); 2^n
(define (h n) (A 2 n)); 2^(2^n)
(define (l n) (A l n)); 2_1^2_2^...^2_l^n
;I think this is the general pattern, at least.

;-------------------------------------------------------

;1.11
(define (f2 n)
    (if (< n 3)
        n
        (+ (f2 (- n 1)) (* 2 (f2 (- n 2))) (* 3 (f2 (- n 3)))))); Rce
    
(define (f3 n)
    (define (f3-it n1 n2 n3 c)
        (if (>= c n)
            n1
            (f3-it (+ n1 (* 2 n2) (* 3 n3)) n1 n2 (+ c 1))))
    (if (< n 3)
        n
        (f3-it 2 1 0 2))); It
        
;-------------------------------------------------------

;1.12
(define (pas y x)
    (if (or (= x 1) (= x y))
        1
        (+ (pas (- y 1) x) (pas (- y 1) (- x 1)))))

;-------------------------------------------------------

;1.13 to 1.15(m Eh, maybe later.

;-------------------------------------------------------

;1.16
(define (fexp b n)
    (define (square x) (* x x))
    (define (fexp-it b n a)
        (cond ((= n 0) a)
              ((= (mod n 2) 0) (fexp-it b (/ n 2) (* a (square b))))
              ((= (mod n 2) 1) (fexp-it b (- n 1) (* a b)))))
    (fexp-it b n 1))

;-------------------------------------------------------

;1.17
(define (fm a b)
    (define (double n) (* n 2))
    (define (half n) (/ n 2))
    (cond ((= a 0) 0)
          ((= (mod a 2) 0) (fm (half a) (double b)))
          ((= (mod a 2) 1) (+ b (fm (- a 1) b)))))
          
;-------------------------------------------------------

;1.18


