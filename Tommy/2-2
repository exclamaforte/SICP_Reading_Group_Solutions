;2.17
(define (last-pair list1)
    (cond ((null? list1) (list))
          ((= (length list1) 1) list1)
          (else (last-pair (cdr list1)))))

;2.18

(define (reverse list1)
    (if (= (length list1) 1) list1
        (append (reverse (cdr list1)) (list (car list1)))))
        
;2.20
(define (filter predicate sequence)
    (cond ((null? sequence) (list))
        ((predicate (car sequence))
        (cons (car sequence)
        (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
  
(define (same-parity f . ls)
    (filter (lambda (x) (or (and (even? f) (even? x))
                            (and (odd? f) (odd? x)))) ls))

;2.21

(define (square-list1 items)
    (if (null? items)
        (list)
        (cons (* (car items) (car items))
              (square-list1 (cdr items)))))
        
(define (square-list2 items)
    (map (lambda (x) (* x x)) items))
    
;2.23

(define (for-eacH f items)
    (if (null? items)
        #t
        (f (car items))
        (for-eacH f (cdr items))))

;2.25
(define a (list 1 3 (list 5 7) 9)) ;(1 3 (5 7) 9)
(define b (list (list 7))) ;((7))
(define c (list 1 (list 2 (list 3 (list 4
            (list 5 (list 6 7))))))) ;(1 (2 (3 (4 (5 (6 7))))))
            
;(car (cdr (car (cdr (cdr a)))))
;(car (car b))
;(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr c))))))))))))

;2.26

(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y) ;= (1 2 3 4 5 6)
(cons x y) ;= ((1 2 3) 4 5 6)
(list x y) ;= ((1 2 3) (4 5 6))

;2.27

(define (reverse list1)
    (if (= (length list1) 1) list1
        (append (reverse (cdr list1)) (list (car list1)))))
        
(define (deep-reverse list1)
    (cond ((null? list1) (list))
          ((pair? (car list1)) (append (deep-reverse (cdr list1))
                                       (list (deep-reverse (car list1)))))
          (else (append (deep-reverse (cdr list1))
                        (list (car list1))))))
                   
(define x (list (list 1 2) (list 3 4)))
(deep-reverse x) ;= ((4 3) (2 1))

; 2.28

(define x (list (list 1 2) (list 3 4)))
(define y (list (list 1 (list 2 3)) 4 5 (list 6 7 8)))

(define (fringe ls)
    (cond ((null? ls) (list))
          ((pair? (car ls))
           (fringe (append (car ls) (cdr ls))))
          (else (cons (car ls) (fringe (cdr ls))))))
          
(fringe x) ;= (1 2 3 4)
(fringe y) ;= (1 2 3 4 5 6 7 8)

; 2.29
 
(define (make-mobile left right)
    (list left right))
(define (left-branch mobile)
    (car mobile))
(define (right-branch mobile)
    (cadr mobile))

(define (make-branch len structure)
    (list len structure))
(define (branch-len branch)
    (car branch))
(define (branch-structure branch)
    (cadr branch))

(define (total-weight-m mobile)
    (+ (total-weight-b (left-branch mobile))
       (total-weight-b (right-branch mobile))))

(define (total-weight-b branch)
    (if (not (pair? (branch-structure branch)))
        (branch-structure branch)
        (total-weight-m (branch-structure branch))))

(define (branch-torque branch)
    (* (branch-len branch)
       (total-weight-b branch)))

(define (balanced?-b branch)
    (if (pair? (branch-structure branch))
        (balanced? (branch-structure branch))
        #t))
(define (balanced? mobile)
    (and (= (branch-torque (left-branch mobile))
            (branch-torque (right-branch mobile)))
         (balanced?-b (left-branch mobile))
         (balanced?-b (right-branch mobile))))

(define b1 (make-branch 1 4))
(define b2 (make-branch 1 3))
(define b3 (make-branch 2 2))

(define m1 (make-mobile b1 b3))
(define b4 (make-branch .5 m1))
(define m2 (make-mobile b4 b2))

;d: I'd only have to change the retrievers

;2.30

(define (sqr-tree1 tree)
    (cond ((null? tree) (list))
          ((not (pair? tree)) (* tree tree))
          (else (cons (sqr-tree1 (car tree))
                      (sqr-tree1 (cdr tree))))))
(define (sqr-tree2 tree)
    (map (lambda (sub-tree)
                 (if (pair? sub-tree)
                 (sqr-tree2 sub-tree)
                 (* sub-tree sub-tree)))
         tree))
         
         
;2.31      
         
(define (tree-map proc tree)
    (map (lambda (sub-tree)
                 (if (pair? sub-tree)
                 (sqr-tree2 sub-tree)
                 (proc sub-tree)))
         tree))
(tree-map (lambda (x) (* x x)) 
          (list 1 (list 2 (list 3 4) 5) (list 6 7)))       
         
;2.32         
(define (subsets s)
    (if (null? s)
        (list (list))
        (let ((rest (subsets (cdr s))))
             (append rest (map (lambda (ls) (cons (car s) ls))
                               rest)))))  
         
         
         


