;2.17
(define (last-pair list1)
    (cond ((null? list1) (list))
          ((= (length list1) 1) list1)
          (else (last-pair (cdr list1)))))

;2.18

(define (reverse list1)
    (if (= (length list1) 1) list1
        (append (reverse (cdr list1)) (list (car list1)))))
        
;2.20
(define (filter predicate sequence)
    (cond ((null? sequence) (list))
        ((predicate (car sequence))
        (cons (car sequence)
        (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))
  
(define (same-parity f . ls)
    (filter (lambda (x) (or (and (even? f) (even? x))
                            (and (odd? f) (odd? x)))) ls))

;2.21

(define (square-list1 items)
    (if (null? items)
        (list)
        (cons (* (car items) (car items))
              (square-list1 (cdr items)))))
        
(define (square-list2 items)
    (map (lambda (x) (* x x)) items))
    
;2.23

(define (for-eacH f items)
    (if (null? items)
        #t
        (f (car items))
        (for-eacH f (cdr items))))

;2.25
(define a (list 1 3 (list 5 7) 9)) ;(1 3 (5 7) 9)
(define b (list (list 7))) ;((7))
(define c (list 1 (list 2 (list 3 (list 4
            (list 5 (list 6 7))))))) ;(1 (2 (3 (4 (5 (6 7))))))
            
;(car (cdr (car (cdr (cdr a)))))
;(car (car b))
;(car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr c))))))))))))

;2.26

(define x (list 1 2 3))
(define y (list 4 5 6))

(append x y) ;= (1 2 3 4 5 6)
(cons x y) ;= ((1 2 3) 4 5 6)
(list x y) ;= ((1 2 3) (4 5 6))

;2.27

(define (reverse list1)
    (if (= (length list1) 1) list1
        (append (reverse (cdr list1)) (list (car list1)))))
        
(define (deep-reverse list1)
    (cond ((null? list1) (list))
          ((pair? (car list1)) (append (deep-reverse (cdr list1))
                                       (list (deep-reverse (car list1)))))
          (else (append (deep-reverse (cdr list1))
                        (list (car list1))))))
                   
(define x (list (list 1 2) (list 3 4)))
(deep-reverse x) ;= ((4 3) (2 1))










